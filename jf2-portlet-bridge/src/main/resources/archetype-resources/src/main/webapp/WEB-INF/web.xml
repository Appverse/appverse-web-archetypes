#set( $symbol_pound = '#' )
#set( $symbol_dollar = '$' )
#set( $symbol_escape = '\' )
<?xml version="1.0" encoding="UTF-8"?>

<web-app xmlns="http://java.sun.com/xml/ns/javaee" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/web-app_2_5.xsd" version="2.5">
	
	<display-name>Your project name</display-name>
	
	<!--  Take this into account regarding the name of the portlet:
	https://issues.liferay.com/browse/LPS-42120
	 -->	
	
	<listener>
		<listener-class>org.springframework.web.util.Log4jConfigListener</listener-class>
	</listener>	
	<context-param>
		<param-name>log4jConfigLocation</param-name>
		<param-value>classpath:log4j/log4j.properties</param-value>
	</context-param>
		
	<!-- Spring listeners setup -->
	<listener>
		<listener-class>org.springframework.web.context.ContextLoaderListener</listener-class>
	</listener>
	<listener>
		<listener-class>org.springframework.web.context.request.RequestContextListener</listener-class>
	</listener>
	
	<!--  Commented temporarily to test if this caused a problem with liferay 6.2 where the order of the listener might cause problems -->	
	<listener>
		<listener-class>org.springframework.web.util.IntrospectorCleanupListener</listener-class>
	</listener>

	<!-- Spring context config file include -->
	<context-param>
		<param-name>contextConfigLocation</param-name>
		<param-value>classpath:spring/application-config.xml</param-value>
	</context-param>

	<!-- Faces context initialization -->
	
	<!-- Set the JSF 2 PROJECT_STAGE to Development so that the JSF implementation will do the following at runtime: -->
	<!-- 1. Log more verbose messages. -->
	<!-- 2. Render tips and/or warnings in the view markup. -->
	<!-- 3. Cause the default ExceptionHandler to display a developer-friendly error page. -->
	<context-param>
		<param-name>javax.faces.PROJECT_STAGE</param-name>
		<param-value>Development</param-value>
	</context-param>
	<!-- Instruct Mojarra to utilize JBoss-EL instead of the EL implementation provided by the servlet container. -->
	<context-param>
		<param-name>com.sun.faces.expressionFactory</param-name>
		<param-value>org.jboss.el.ExpressionFactoryImpl</param-value>
	</context-param>
	<!-- Workaround for http://issues.liferay.com/browse/FACES-1194 -->
	<context-param>
		<param-name>com.liferay.faces.bridge.primeFileUploadForceResourceURL</param-name>
		<param-value>true</param-value>
	</context-param>
	<!-- Although the FacesServlet will not be invoked by any portlet requests, it is required to initialize JSF. -->
	<servlet>
		<servlet-name>Faces Servlet</servlet-name>
		<servlet-class>javax.faces.webapp.FacesServlet</servlet-class>
		<load-on-startup>1</load-on-startup>
	</servlet>
	<!-- MyFaces will not initialize unless a servlet-mapping to the Faces Servlet is present. -->
	<servlet-mapping>
		<servlet-name>Faces Servlet</servlet-name>
		<url-pattern>*.xhtml</url-pattern>
	</servlet-mapping>
	<!-- Prevent direct access to Facelet view XHTML by the userAgent (browser). --> 
	<security-constraint>
		<web-resource-collection>
			<web-resource-name>Facelet View XHTML</web-resource-name>
			<url-pattern>*.xhtml</url-pattern>
		</web-resource-collection>
		<auth-constraint>
			<role-name>nobody</role-name>
		</auth-constraint>
	</security-constraint>
	<security-role>
		<role-name>nobody</role-name>
	</security-role>
</web-app>